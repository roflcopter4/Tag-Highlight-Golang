Writing request 1 or 0.
======================================
[
    0
    0
    "nvim_call_function"
    [
        "serverstart"
        []
    ]
]
======================================
[
    1
    0
    NIL
    "/tmp/nvimQVLEKW/29"
]
Writing request 2 or 0.
======================================
[
    0
    1
    "nvim_get_var"
    [
        "tag_highlight#compression_type"
    ]
]
======================================
[
    1
    1
    NIL
    "lzma"
]
Writing request 3 or 0.
======================================
[
    0
    2
    "nvim_out_write"
    [
        "Compression type is 'lzma' -> 1
"
    ]
]
======================================
[
    1
    2
    NIL
    NIL
]
Writing request 4 or 0.
======================================
[
    0
    3
    "nvim_get_var"
    [
        "tag_highlight#compression_level"
    ]
]
======================================
[
    1
    3
    NIL
    9
]
Writing request 5 or 0.
======================================
[
    0
    4
    "nvim_get_var"
    [
        "tag_highlight#ctags_args"
    ]
]
======================================
[
    1
    4
    NIL
    [
        "--fields=+l"
        "--c-kinds=+px"
        "--c++-kinds=+px"
        "--sort=yes"
        "--exclude='.mypy_cache'"
        "--regex-go='/^\s*(var)?\s*(\w*)\s*:?=\s*func/\2/f/'"
        "--languages=-Pod"
        "--exclude='*Makefile'"
        "--exclude='*Makefile.in'"
        "--exclude='*aclocal.m4'"
        "--exclude='*config.guess'"
        "--exclude='*config.h.in'"
        "--exclude='*config.log'"
        "--exclude='*config.status'"
        "--exclude='*configure'"
        "--exclude='*depcomp'"
        "--exclude='*install-sh'"
        "--exclude='*missing'"
    ]
]
Writing request 6 or 0.
======================================
[
    0
    5
    "nvim_get_var"
    [
        "tag_highlight#enabled"
    ]
]
======================================
[
    1
    5
    NIL
    1
]
Writing request 7 or 0.
======================================
[
    0
    6
    "nvim_get_var"
    [
        "tag_highlight#ignore"
    ]
]
======================================
[
    1
    6
    NIL
    [
        "cfg"
        "conf"
        "help"
        "mail"
        "markdown"
        "nerdtree"
        "nofile"
        "qf"
        "text"
        "man"
        "preview"
        "fzf"
    ]
]
Writing request 8 or 0.
======================================
[
    0
    7
    "nvim_get_var"
    [
        "tag_highlight#ignored_tags"
    ]
]
======================================
[
    1
    7
    NIL
    {
        "c"  =>  (
            [
                "xmalloc"
                "xcalloc"
                "xrealloc"
                "xreallocarray"
                "nmalloc"
                "nrealloc"
                "_Bool"
                "static_assert"
                "malloc"
                "calloc"
                "realloc"
                "reallocarray"
                "free"
                "xfree"
                "__attribute__"
                "TRUE"
                "FALSE"
            ]
        )
        "cpp"  =>  (
            [
                "xmalloc"
                "xcalloc"
                "xrealloc"
                "xreallocarray"
                "nmalloc"
                "nrealloc"
                "_Bool"
                "static_assert"
                "malloc"
                "calloc"
                "realloc"
                "reallocarray"
                "free"
                "xfree"
                "__attribute__"
                "TRUE"
                "FALSE"
            ]
        )
    }
]
Writing request 9 or 0.
======================================
[
    0
    8
    "nvim_get_var"
    [
        "tag_highlight#norecurse_dirs"
    ]
]
======================================
[
    1
    8
    NIL
    [
        "/home/bml"
        "/"
        "/include"
        "/usr/include"
        "/usr/share"
        "/usr/local/include"
        "/usr/local/share"
        "/tmp"
        "/usr/src"
        "/usr/ports"
        "/usr/dports"
        "/home/bml/personaldotfiles"
        "/home/bml/random"
        "/home/bml/random/Code"
        "/home/bml/random/school"
        "/home/bml/Downloads"
        "/home/bml/documents"
    ]
]
Writing request 10 or 0.
======================================
[
    0
    9
    "nvim_get_var"
    [
        "tag_highlight#settings_file"
    ]
]
======================================
[
    1
    9
    NIL
    "/home/bml/.vim_tags/tag_highlight.txt"
]
Writing request 11 or 0.
======================================
[
    0
    10
    "nvim_get_var"
    [
        "tag_highlight#use_compression"
    ]
]
======================================
[
    1
    10
    NIL
    1
]
Writing request 12 or 0.
======================================
[
    0
    11
    "nvim_get_var"
    [
        "tag_highlight#verbose"
    ]
]
======================================
[
    1
    11
    NIL
    0
]
Writing request 13 or 0.
======================================
[
    0
    12
    "nvim_get_current_buf"
    []
]
======================================
[
    1
    12
    NIL
    EXT: (0 -> 1)
]
Writing request 14 or 0.
======================================
[
    0
    13
    "nvim_buf_get_option"
    [
        1
        "ft"
    ]
]
======================================
[
    1
    13
    NIL
    "go"
]
Writing request 15 or 0.
======================================
[
    0
    14
    "nvim_buf_get_name"
    [
        1
    ]
]
======================================
[
    1
    14
    NIL
    "/home/bml/.vim/dein/repos/github.com/roflcopter4/tag-highlight.nvim/go/src/tag_highlight/events.go"
]
Writing request 16 or 0.
======================================
[
    0
    15
    "nvim_out_write"
    [
        "Initializing new topdir "/home/bml/.vim/dein/repos/github.com/roflcopter4/tag-highlight.nvim/go/src/tag_highlight", ft go
"
    ]
]
======================================
[
    1
    15
    NIL
    NIL
]
Writing request 17 or 0.
======================================
[
    0
    16
    "nvim_call_function"
    [
        "tempname"
        []
    ]
]
======================================
[
    1
    16
    NIL
    "/tmp/nvimQVLEKW/30"
]
Writing request 18 or 0.
======================================
[
    0
    17
    "nvim_get_var"
    [
        "tag_highlight#go#order"
    ]
]
======================================
[
    1
    17
    NIL
    "pftsicmv"
]
Writing request 19 or 0.
======================================
[
    0
    18
    "nvim_get_var"
    [
        "tag_highlight#go#equivalent"
    ]
]
======================================
[
    1
    18
    [
        1
        "Key 'tag_highlight#go#equivalent' not found"
    ]
    NIL
]
Writing request 20 or 0.
======================================
[
    0
    19
    "nvim_buf_attach"
    [
        1
        true
        []
    ]
]
======================================
[
    2
    "nvim_buf_lines_event"
    [
        EXT: (0 -> 1)
        3
        0
        -1
        [
            "package main"
            ""
            "import ("
            "	"os""
            "	"sync""
            "	ll "tag_highlight/linked_list""
            "	"tag_highlight/mpack""
            ")"
            ""
            "const ( // Event types"
            "	event_BUF_LINES = iota"
            "	event_BUF_CHANGED_TICK"
            "	event_BUF_DETACH"
            "	event_VIM_UPDATE"
            ")"
            "const write_buf_updates = true"
            ""
            "type event_id struct {"
            "	name string"
            "	id   int"
            "}"
            ""
            "var ("
            "	event_list = [4]event_id{"
            "		{"nvim_buf_lines_event", event_BUF_LINES},"
            "		{"nvim_buf_changedtick_event", event_BUF_CHANGED_TICK},"
            "		{"nvim_buf_detach_event", event_BUF_DETACH},"
            "		{"vim_event_update", event_VIM_UPDATE},"
            "	}"
            "	event_mutex sync.Mutex"
            ")"
            ""
            "//========================================================================================"
            ""
            "func handle_nvim_event(event *mpack.Object) {"
            "	event_mutex.Lock()"
            "	defer event_mutex.Unlock()"
            ""
            "	etype := id_event(event)"
            "	info := event.Index(2)"
            ""
            "	if etype.id == event_VIM_UPDATE {"
            "		panic("Not implemented yet.")"
            "	} else {"
            "		bufnum := int(info.Index(0).Get_Expect(mpack.T_NUM).(int64))"
            "		bdata := Find_Buffer(bufnum)"
            "		if bdata == nil {"
            "			panic("Update called on an uninitialized buffer.")"
            "		}"
            ""
            "		switch etype.id {"
            "		case event_BUF_LINES:"
            "			handle_line_event(bdata, info)"
            "		case event_BUF_CHANGED_TICK:"
            "			bdata.Ctick = uint32(info.Index(1).Get_Expect(mpack.T_NUM).(int64))"
            "		case event_BUF_DETACH:"
            "			echo("Detaching from buffer %d", bufnum)"
            "			Remove_Buffer(bufnum)"
            "		}"
            "	}"
            "}"
            ""
            "//========================================================================================"
            ""
            "func handle_line_event(bdata *Bufdata, data *mpack.Object) {"
            "	if data.Index(5).Get_Expect(mpack.T_BOOL).(bool) {"
            "		panic("Somehow the boolean argument is true!")"
            "	}"
            ""
            "	bdata.Ctick = uint32(data.Index(1).Get_Expect(mpack.T_NUM).(int64))"
            "	var ("
            "		first     = int(data.Index(2).Get_Expect(mpack.T_NUM).(int64))"
            "		last      = int(data.Index(3).Get_Expect(mpack.T_NUM).(int64))"
            "		repl_list = data.Index(4).Get_Expect(mpack.G_STRLIST).([]string)"
            "		diff      = last - first"
            "		iters     = max_int(diff, len(repl_list))"
            "		empty     = false"
            "	)"
            ""
            "	if len(repl_list) > 0 {"
            "		if last == (-1) {"
            "			if bdata.Lines.Qty == 1 {"
            "				bdata.Lines.Delete_Node(bdata.Lines.Head)"
            "			}"
            "			bdata.Lines.Insert_Slice_After(bdata.Lines.Head, 0, (-1), to_interface(repl_list)...)"
            "		} else if bdata.Lines.Qty <= 1 && first == 0 && len(repl_list) == 1 && len(repl_list[0]) == 0 {"
            "			/* Useless update, one empty string in an empty buffer."
            "			 * Just ignore it. */"
            "			echo("Empty update, ignoring.")"
            "			empty = true"
            "		} else if first == 0 && last == 0 {"
            "			/* Inserting above the first line in the file. */"
            "			bdata.Lines.Insert_Slice_Before_At(first, 0, (-1), repl_list)"
            "		} else {"
            "			olen := bdata.Lines.Qty"
            "			/* This loop is only meaningful when replacing lines."
            "			 * All other paths break after the first iteration. */"
            "			for i := 0; i < iters; i++ {"
            "				if diff > 0 && i < olen {"
            "					diff--"
            "					if i < len(repl_list) {"
            "						bdata.Lines.Replace_At(first+i, repl_list[i])"
            "					} else {"
            "						bdata.Lines.Delete_Range_At(first+i, diff+1)"
            "						break"
            "					}"
            "				} else {"
            "					/* If the first line not being replaced"
            "					 * (first + i) is at the end of the file, then we"
            "					 * append. Otherwise the update is prepended. */"
            "					if (first + i) >= bdata.Lines.Qty {"
            "						bdata.Lines.Insert_Slice_After_At(first+i, i, (-1), to_interface(repl_list)...)"
            "					} else {"
            "						bdata.Lines.Insert_Slice_Before_At(first+i, i, (-1), to_interface(repl_list)...)"
            "					}"
            "				}"
            "			}"
            "		}"
            "	} else {"
            "		/* If the replacement list is empty then all we're doing is deleting"
            "		 * lines. However, for some reason neovim sometimes sends updates with an"
            "		 * empty list in which both the first and last line are the same. God"
            "		 * knows what this is supposed to indicate. I'll just ignore them. */"
            "		bdata.Lines.Delete_Range_At(first, diff)"
            "	}"
            ""
            "	/* Neovim always considers there to be at least one line in any buffer."
            "	 * An empty buffer therefore must have one empty line. */"
            "	if bdata.Lines.Qty == 0 {"
            "		bdata.Lines.Append("")"
            "	}"
            "	/* If the replace list wasn't empty, set the buffer as initialized. */"
            "	if !bdata.Initialized && !empty {"
            "		bdata.Initialized = true"
            "	}"
            ""
            "	if DEBUG {"
            "		if write_buf_updates {"
            "			write_buf(bdata.Lines)"
            "		}"
            ""
            "		if !bdata.Lines.Verify_Size() {"
            "			panic("Linked list size verification failed.")"
            "		}"
            ""
            "		if ctick := Nvim_buf_get_changedtick(0, int(bdata.Num)); ctick == int(bdata.Ctick) {"
            "			if n := Nvim_buf_line_count(0, int(bdata.Num)); n != bdata.Lines.Qty {"
            "				panic_fmt("Recorded size (%d) is incorrect, actual value"+"
            "					" is (%d), cannot continue.", bdata.Lines.Qty, n)"
            "			}"
            "		}"
            "	}"
            "}"
            ""
            "//========================================================================================"
            ""
            "func id_event(event *mpack.Object) *event_id {"
            "	name := event.Index(1).Get_Expect(mpack.G_STRING).(string)"
            ""
            "	for i, item := range event_list {"
            "		if name == item.name {"
            "			return &event_list[i]"
            "		}"
            "	}"
            ""
            "	panic("Failed to identify event type.")"
            "}"
            ""
            "func write_buf(list *ll.Linked_List) {"
            "	tmpfile := Nvim_call_function(0, "tempname", mpack.G_STRING).(string)"
            "	file := safe_fopen(tmpfile, os.O_CREATE|os.O_WRONLY|os.O_TRUNC|os.O_SYNC, 0600)"
            "	defer file.Close()"
            ""
            "	for cur := list.Head; cur != nil; cur = cur.Next {"
            "		file.WriteString(cur.Data.(string) + "\n")"
            "	}"
            ""
            "	echo("Done writing file - %s.", tmpfile)"
            "}"
            ""
            "func to_interface(strlist []string) []interface{} {"
            "	ret := make([]interface{}, len(strlist))"
            ""
            "	for i := range strlist {"
            "		ret[i] = strlist[i]"
            "	}"
            ""
            "	return ret"
            "}"
        ]
        false
    ]
]
======================================
[
    1
    19
    NIL
    true
]
Writing request 21 or 0.
======================================
[
    0
    20
    "nvim_call_function"
    [
        "tempname"
        []
    ]
]
======================================
[
    1
    20
    NIL
    "/tmp/nvimQVLEKW/31"
]
Writing request 22 or 0.
======================================
[
    0
    21
    "nvim_out_write"
    [
        "Done writing file - /tmp/nvimQVLEKW/31.
"
    ]
]
======================================
[
    1
    21
    NIL
    NIL
]
Writing request 23 or 0.
======================================
[
    0
    22
    "nvim_buf_get_changedtick"
    [
        1
    ]
]
======================================
[
    1
    22
    NIL
    3
]
Writing request 24 or 0.
======================================
[
    0
    23
    "nvim_buf_line_count"
    [
        1
    ]
]
======================================
[
    1
    23
    NIL
    189
]
